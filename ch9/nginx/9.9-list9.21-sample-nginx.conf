events {
}

http {
    server {
        set $publickey "nginx";
        set $privatekey "lua";
        location / {
            access_by_lua '
                 -- GETリクエストのパラメータをLuaの変数に代入
                 local arg_publickey = ngx.var.arg_publickey
                 local arg_signature = ngx.var.arg_signature
                 local arg_expires   = ngx.var.arg_expires

                 -- expiresを文字列から数値に変換
                 local expires = tonumber(arg_expires)

                 -- nginx.confで設定された公開／秘密鍵をLuaの変数に代入
                 local publickey  = ngx.var.publickey
                 local privatekey = ngx.var.privatekey

                 -- 公開鍵や有効期限が設定されていない場合は403を返す
                 if arg_publickey ~= publickey or
                    not expires
                 then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                 end

                 -- シグネチャを計算
                 local plaintext = table.concat({ngx.var.request_method,
                                                 ngx.var.uri,
                                                 arg_expires,
                                                 publickey})
                 local hmac_sha1 = ngx.hmac_sha1(privatekey, plaintext)
                 local signature = ngx.encode_base64(hmac_sha1)

                 -- 有効期限が過ぎている場合は403を返す
                 if expires < ngx.now()
                 then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                 end

                 -- シグネチャが一致した場合は
                 -- フックの処理を終了する
                 if signature == arg_signature
                 then
                    return
                 end

                 -- シグネチャが一致しない場合は403を返す
                 ngx.exit(ngx.HTTP_FORBIDDEN)
            ';

            # 認証を通ったリクエストのみプロキシする
            proxy_pass http://app;
        }
    }
}
